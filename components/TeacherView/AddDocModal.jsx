import { useEffect, useState } from "react";
import {
  collection,
  getDocs,
  doc,
  getDoc,
  updateDoc,
} from "firebase/firestore";
import { db } from "../../config/firebaseConfig";
import RNPickerSelect from "react-native-picker-select";

const AddDocModal = ({ isOpen, onClose, classId, teacherEmail }) => {
  const [docs, setDocs] = useState([]);
  const [selectedDoc, setSelectedDoc] = useState("");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!isOpen) return;

    const fetchDocs = async () => {
      setLoading(true);
      try {
        const querySnapshot = await getDocs(collection(db, "docs"));
        const teacherDocs = querySnapshot.docs
          .map((doc) => ({ id: doc.id, ...doc.data() }))
          .filter((d) => d.createBy === teacherEmail);

        setDocs(teacherDocs);
      } catch (error) {
        console.error("üö® L·ªói t·∫£i t√†i li·ªáu:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchDocs();
  }, [isOpen, teacherEmail]);

  const handleAddDoc = async () => {
    if (!selectedDoc) {
      console.error("‚ùå Kh√¥ng c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c ch·ªçn!");
      return;
    }

    console.log(`üìÇ ƒêang th√™m t√†i li·ªáu: ${selectedDoc} v√†o l·ªõp ${classId}`);

    try {
      const classRef = doc(db, "classes", classId);
      const classSnap = await getDoc(classRef);

      if (!classSnap.exists()) {
        console.error("‚ùå L·ªõp kh√¥ng t·ªìn t·∫°i!");
        return;
      }

      const classData = classSnap.data();
      console.log("üéì D·ªØ li·ªáu l·ªõp:", classData);

      const students = classData.students || {};
      const studentIds = Object.keys(students);

      if (studentIds.length === 0) {
        console.warn("‚ö† L·ªõp ch∆∞a c√≥ sinh vi√™n!");
        return;
      }

      console.log("üë©‚Äçüéì Danh s√°ch sinh vi√™n:", studentIds);

      const studentData = {};
      for (const studentId of studentIds) {
        const studentRef = doc(db, "users", studentId);
        const studentSnap = await getDoc(studentRef);

        if (studentSnap.exists()) {
          const studentInfo = studentSnap.data();
          const msv = studentInfo.msv || studentId;
          studentData[msv] = { completedChapters: [], quizScore: 0 };
        } else {
          console.warn(
            `‚ö† Kh√¥ng t√¨m th·∫•y th√¥ng tin c·ªßa sinh vi√™n: ${studentId}`
          );
        }
      }

      console.log("üìù D·ªØ li·ªáu sinh vi√™n m·ªõi:", studentData);

      const existingDocs = classData.docs || {};
      const existingDocData = existingDocs[selectedDoc] || {};

      console.log("üìå D·ªØ li·ªáu t√†i li·ªáu tr∆∞·ªõc khi c·∫≠p nh·∫≠t:", existingDocData);

      const updatedDocData = { ...existingDocData };

      for (const msv in studentData) {
        if (!(msv in updatedDocData)) {
          updatedDocData[msv] = studentData[msv];
        }
      }

      console.log("‚úÖ D·ªØ li·ªáu t√†i li·ªáu sau khi c·∫≠p nh·∫≠t:", updatedDocData);

      await updateDoc(classRef, {
        [`docs.${selectedDoc}`]: updatedDocData,
      });

      console.log("üéâ T√†i li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!");

      onClose();
    } catch (error) {
      console.error("‚ùå L·ªói th√™m t√†i li·ªáu:", error);
    }
  };

  const options = docs.map((doc) => ({
    value: doc.id,
    label: doc.Title,
  }));

  if (!isOpen) return null;

  return (
    <div style={modalOverlay}>
      <div style={modalContent}>
        <h2>Th√™m t√†i li·ªáu v√†o l·ªõp</h2>
        {loading ? (
          <p>ƒêang t·∫£i t√†i li·ªáu...</p>
        ) : (
          // <select
          //   value={selectedDoc}
          //   onChange={(e) => setSelectedDoc(e.target.value)}
          // >
          //   <option value="">Ch·ªçn t√†i li·ªáu</option>
          //   {docs.map((doc) => (
          //     <option key={doc.id} value={doc.id}>
          //       {doc.Title}
          //     </option>
          //   ))}
          // </select>
          <RNPickerSelect
            onValueChange={(value) => setSelectedDoc(value)}
            items={options}
            placeholder={{ label: "Ch·ªçn t√†i li·ªáu", value: null }}
          />
        )}
        <div style={{ marginTop: "10px" }}>
          <button onClick={handleAddDoc} disabled={!selectedDoc}>
            Th√™m
          </button>
          <button onClick={onClose} style={{ marginLeft: "10px" }}>
            ƒê√≥ng
          </button>
        </div>
      </div>
    </div>
  );
};

export default AddDocModal;

const modalOverlay = {
  position: "fixed",
  top: 0,
  left: 0,
  width: "100%",
  height: "100%",
  backgroundColor: "rgba(0,0,0,0.5)",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
};

const modalContent = {
  position: "relative",
  backgroundColor: "#fff",
  padding: "20px",
  borderRadius: "8px",
  boxShadow: "0 4px 8px rgba(0,0,0,0.2)",
  width: "300px",
  textAlign: "center",
};
